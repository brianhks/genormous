group object_query;


objectQuery() ::= <<
/**
This file is automatically generated.  Do not modify
*/
package $package$;

import java.util.Locale;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.sql.*;
import org.xml.sax.ContentHandler;
import org.xml.sax.Attributes;
import $package$.genorm.*;

public class $query.className$Query extends SQLQuery
	{
	public static final String QUERY_NAME = "$query.queryName$";
	public static final String QUERY = "$query.sqlQuery$";
	private static final int ATTRIBUTE_COUNT = $query.outputsCount$;
	private static Map<String, Integer> s_attributeIndex;
	private static String[] s_attributeNames = {
			$query.outputs:{out | "$out.xmlName$"}; separator=",\n"$ };
			
	static
		{
		s_attributeIndex = new HashMap<String, Integer>();
		for (int I = 0; I < ATTRIBUTE_COUNT; I++)
			s_attributeIndex.put(s_attributeNames[I], I);
		}
	
	private List<Data> m_lastQuery;
	private boolean m_serializable;
	
	public $query.className$Query()
		{
		super();
		}
		
	private void doQuery(boolean serializable$if(query.paramQuery)$, $endif$$[query.inputs,query.replacements]:{ p | $p.type$ $p.parameterName$}; separator=", "$)
			throws SQLException
		{
		String query = QUERY;
		$if(query.replaceQuery)$
		HashMap<String, String> replaceMap = new HashMap<String, String>();
		$query.replacements:{rep | replaceMap.put("$rep.tag$", $rep.parameterName$);}$
		query = replaceText(query, replaceMap);
		$endif$
		
		PreparedStatement statement = GenOrmDataSource.prepareStatement(query);
		$query.inputs:{in | statement.set$javaToJDBCMap.(in.type)$($i$, $in.parameterName$);}$
		
		ResultSet resultSet = statement.executeQuery();
		
		m_lastQuery = new ArrayList<Data>();
		
		while (resultSet.next())
			m_lastQuery.add(new Data(resultSet, serializable));
		
		statement.close();
		}
		
	public void setSerializable(boolean serializable)
		{
		m_serializable = serializable;
		}
		
	public void serializeQuery(ContentHandler ch, String tagName$if(query.paramQuery)$, $endif$$[query.inputs,query.replacements]:{ p | $p.type$ $p.parameterName$}; separator=", "$)
			throws SQLException, org.xml.sax.SAXException
		{
		doQuery(true$if(query.paramQuery)$, $endif$$[query.inputs,query.replacements]:{ p | $p.parameterName$}; separator=", "$);
		
		Iterator<Data> it = m_lastQuery.iterator();
		while (it.hasNext())
			{
			Data data = it.next();
			ch.startElement("", tagName, tagName, data);
			ch.endElement("", tagName, tagName);
			}
		}
	
	public List<Data> runQuery($[query.inputs,query.replacements]:{ p | $p.type$ $p.parameterName$}; separator=", "$)
			throws SQLException
		{
		doQuery(m_serializable$if(query.paramQuery)$, $endif$$[query.inputs,query.replacements]:{ p | $p.parameterName$}; separator=", "$);
		
		return (m_lastQuery);
		}
		
	public List<Data> getLastQueryData()
		{
		return (m_lastQuery);
		}
		
		
	//===========================================================================
	public class Data implements Attributes
		{
		$query.outputs:{ o | private $o.type$ m_$o.parameterName$;
}$
		private String[] m_attrValues;
		
		public Data(ResultSet rs, boolean serializable)
				throws SQLException
			{
			$query.outputs:{ o | m_$o.parameterName$ = rs.get$javaToJDBCMap.(o.type)$($i$);
}$
			if (serializable)
				{
				m_attrValues = new String[ATTRIBUTE_COUNT];
				
				$query.outputs:{ o | m_attrValues[$i0$] = $query.className$Query.this.m_formatter.toString(s_attributeNames[$i0$], m_$o.parameterName$);
}$
				}
			}
			
		$query.outputs:{ param | public $param.type$ $if(param.booleanType)$is$else$get$endif$$param.methodName$() { return (m_$param.parameterName$); }
}$ 
		
		//------------------------------------------------------------------------
		public String toString()
			{
			StringBuilder sb = new StringBuilder();
			$query.outputs:{ o | sb.append(" $o.name$=\"");
sb.append(m_$o.parameterName$);
sb.append("\"");
}$
			return (sb.toString().trim());
			}
			
		//------------------------------------------------------------------------
		/*Attributes*/
		public int getIndex(String qName)
			{
			Integer index = s_attributeIndex.get(qName);
			if (index == null)
				return (-1);
			else
				return (index);
			}
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public int getIndex(String uri, String localName)
			{
			if (uri == null || uri.equals(""))
				return (getIndex(localName));
			else
				return (-1);
			}
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public int getLength() { return (ATTRIBUTE_COUNT); }
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getLocalName(int index)
			{
			if (index < 0 || index >= ATTRIBUTE_COUNT)
				return (null);
			else
				return (s_attributeNames[index]);
			}
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getQName(int index)
			{
			if (index < 0 || index >= ATTRIBUTE_COUNT)
				return (null);
			else
				return (s_attributeNames[index]);
			}
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getType(int index) { return ("CDATA"); }
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getType(String qName) { return ("CDATA"); }
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getType(String uri, String localName) { return ("CDATA"); }
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getURI(int index)
			{
			if (index < 0 || index >= ATTRIBUTE_COUNT)
				return (null);
			else
				return ("");
			}
			
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getValue(int index)
			{
			if (index < 0 || index >= ATTRIBUTE_COUNT)
				return (null);
			else
				return (m_attrValues[index]);
			}
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getValue(String qName)
			{
			return (getValue(getIndex(qName)));
			}
		
		//------------------------------------------------------------------------
		/*Attributes*/
		public String getValue(String uri, String localName)
			{
			return (getValue(getIndex(uri, localName)));
			}
			
		}
	}
>>
