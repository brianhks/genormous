package genorm.test.orm;

import java.util.*;
import genorm.runtime.*;

/**
	This class has been automatically generated by GenORMous.  This file
	should not be modified.
	
*/
public class Author_base extends GenOrmRecord
	{
	protected static final Logger s_logger = LoggerFactory.getLogger(Author.class.getName());

	public static final String COL_AUTHOR_ID = "author_id";
	public static final String COL_NAME = "name";

	//Change this value to true to turn on warning messages
	private static final boolean WARNINGS = false;
	private static final String SELECT = "SELECT this.\"author_id\", this.\"name\" ";
	private static final String FROM = "FROM author this ";
	private static final String WHERE = "WHERE ";
	private static final String KEY_WHERE = "WHERE \"author_id\" = ?";
	
	private static final String TABLE_NAME = "author";
	
	private static final GenOrmFieldMeta AUTHOR_ID_FIELD_META = new GenOrmFieldMeta("author_id", "integer", 0x1, true, false);
	private static final GenOrmFieldMeta NAME_FIELD_META = new GenOrmFieldMeta("name", "string", 0x2, false, false);

	
	//===========================================================================
	public static class AuthorKeyGenerator
			implements GenOrmKeyGenerator
		{
		private static final String MAX_QUERY = "SELECT MAX(\"author_id\") FROM author";
		
		private volatile long m_nextKey;
		private javax.sql.DataSource m_ds;
		
		public AuthorKeyGenerator(javax.sql.DataSource ds)
			{
			m_ds = ds;
			m_nextKey = 0;
			try
				{
				java.sql.Connection con = m_ds.getConnection();
				java.sql.Statement stmnt = con.createStatement();
				java.sql.ResultSet rs = stmnt.executeQuery(MAX_QUERY);
				if (rs.next())
					m_nextKey = rs.getLong(1);
				
				rs.close();
				stmnt.close();
				con.commit();
				con.close();
				}
			catch (java.sql.SQLException sqle)
				{
				//The exception may occur if the table does not yet exist
				if (WARNINGS)
					System.out.println(sqle);
				}
			}
			
		/**
		This resets the key generator from the values in the database
		Usefull if the generated key has been modified via some other means
		Connection must be open before calling this
		*/
		public synchronized void reset()
			{
			m_nextKey = 0;
			try
				{
				java.sql.Connection con = GenOrmDataSource.getConnection();
				java.sql.Statement stmnt = con.createStatement();
				java.sql.ResultSet rs = stmnt.executeQuery(MAX_QUERY);
				if (rs.next())
					m_nextKey = rs.getLong(1);
				
				rs.close();
				stmnt.close();
				}
			catch (java.sql.SQLException sqle)
				{
				//The exception may occur if the table does not yet exist
				if (WARNINGS)
					System.out.println(sqle);
				}
			}
			
		public synchronized long generateKey()
			{
			m_nextKey++;
			return (m_nextKey);
			}
		}
		
	//===========================================================================
	public static AuthorFactory factory = new AuthorFactory();
	
	public static class AuthorFactory //Inherit interfaces
			implements GenOrmRecordFactory
		{
		public static final String CREATE_SQL = "CREATE CACHED TABLE author (\n	\"author_id\" INT  NOT NULL,\n	\"name\" VARCHAR  NULL,\n	PRIMARY KEY (\"author_id\")\n	)";

		private ArrayList<GenOrmFieldMeta> m_fieldMeta;
		
		private AuthorFactory()
			{
			m_fieldMeta = new ArrayList<GenOrmFieldMeta>();
			m_fieldMeta.add(AUTHOR_ID_FIELD_META);
			m_fieldMeta.add(NAME_FIELD_META);

			}
			
		protected Author newAuthor(java.sql.ResultSet rs)
			{
			Author rec = new Author();
			((Author_base)rec).initialize(rs);
			return ((Author)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
			}
	
		//---------------------------------------------------------------------------
		/**
			Returns a list of the feild meta for the class that this is a factory of
		*/
		public List<GenOrmFieldMeta> getFields()
			{
			return (m_fieldMeta);
			}

		//---------------------------------------------------------------------------
		/**
			Returns the SQL create statement for this table
		*/
		public String getCreateStatement()
			{
			return (CREATE_SQL);
			}
			
		//---------------------------------------------------------------------------
		/**
			Creates a new entry with the specified primary keys.
		*/
		public Author create(int authorId)
			{
			Author rec = new Author();
			((Author_base)rec).setAuthorId(authorId);

			rec.m_isNewRecord = true;
			
			return ((Author)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
			}
		//---------------------------------------------------------------------------
		/**
			Creates a new entry that is empty
		*/
		public Author createRecord()
			{
			Author rec = new Author();
			rec.m_isNewRecord = true;
			
			return ((Author)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
			}
			
		//---------------------------------------------------------------------------
		/**
		If the table has a primary key that is auto generated this method will 
		return a new table entry with a generated primary key.
		@return Author with generated primary key
		*/
		public Author createWithGeneratedKey()
			{
			Author rec = new Author();
			
			rec.m_isNewRecord = true;
			rec.setAuthorId(
					(int)GenOrmDataSource.getKeyGenerator("author").generateKey());
			
			return ((Author)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
			}
			
		//---------------------------------------------------------------------------
		/**
		A generic api for finding a record.
		@param keys This must match the primary key for this record.  If the 
		record has multiple primary keys this parameter must be of type Object[] 
		where each element is the corresponding key.
		@return Author or null if no record is found
		*/
		public Author findRecord(Object keys)
			{
			return (find((Integer)keys));
			}
			
		//---------------------------------------------------------------------------
		/**
			Deletes the record with the specified primary keys.
			The point of this api is to prevent a hit on the db to see if the record
			is there.  This call will add a record to the next transaction that is 
			marked for delete. 
			
			@return Returns true if the record was previous created and existed
			either in the transaction cache or the db.
		*/
		public boolean delete(int authorId)
			{
			boolean ret = false;
			Author rec = new Author();
			
			((Author_base)rec).initialize(authorId);
			GenOrmConnection con = GenOrmDataSource.getGenOrmConnection();
			Author cachedRec = (Author)con.getCachedRecord(rec.getRecordKey());
			
			if (cachedRec != null)
				{
				ret = true;
				cachedRec.delete();
				}
			else
				{
				rec = (Author)con.getUniqueRecord(rec);  //This adds the record to the cache
				rec.delete();
				try
					{
					ret = rec.flush();
					}
				catch (java.sql.SQLException sqle)
					{
					throw new GenOrmException(sqle);
					}
				rec.setIgnored(true); //So the system does not try to delete it again at commmit
				}
				
			return (ret);
			}
			
		//---------------------------------------------------------------------------
		/**
		Find the record with the specified primary keys
		@return Author or null if no record is found
		*/
		public Author find(int authorId)
			{
			Author rec = new Author();
			
			//Create temp object and look in cache for it
			((Author_base)rec).initialize(authorId);
			rec = (Author)GenOrmDataSource.getGenOrmConnection().getCachedRecord(rec.getRecordKey());
			
			if (rec == null)
				{
				try
					{
					//No cached object so look in db
					java.sql.PreparedStatement ps = GenOrmDataSource.prepareStatement(SELECT+FROM+KEY_WHERE);
					ps.setInt(1, authorId);

					s_logger.debug(ps.toString());
						
					java.sql.ResultSet rs = ps.executeQuery();
					if (rs.next())
						rec = newAuthor(rs);
						
					rs.close();
					ps.close();
					}
				catch (java.sql.SQLException sqle)
					{
					throw new GenOrmException(sqle);
					}
				}
				
			return (rec);
			}
		
		//---------------------------------------------------------------------------
		/**
		This is the same as find except if the record returned is null a new one 
		is created with the specified primary keys
		@return A new or existing record.  
		*/
		public Author findOrCreate(int authorId)
			{
			Author rec = find(authorId);
			if (rec == null)
				rec = create(authorId);
				
			return (rec);
			}
			
		//---------------------------------------------------------------------------
		/**
			Convenience method for selecting records.  Ideally this should not be use, 
			instead a custom query for this table should be used.
			@param where sql where statement.
		*/
		public ResultSet select(String where)
			{
			return (select(where, null));
			}
			
		//---------------------------------------------------------------------------
		/**
			Convenience method for selecting records.  Ideally this should not be use, 
			instead a custom query for this table should be used.
			@param where sql where statement.
			@param orderBy sql order by statement
		*/
		public ResultSet select(String where, String orderBy)
			{
			ResultSet rs = null;
			
			try
				{
				java.sql.Statement stmnt = GenOrmDataSource.createStatement();
				StringBuilder sb = new StringBuilder();
				sb.append(SELECT);
				sb.append(FROM);
				if (where != null)
					{
					sb.append(WHERE);
					sb.append(where);
					}
					
				if (orderBy != null)
					{
					sb.append(" ");
					sb.append(orderBy);
					}
				
				String query = sb.toString();
				rs = new SQLResultSet(stmnt.executeQuery(query), query, stmnt);
				}
			catch (java.sql.SQLException sqle)
				{
				throw new GenOrmException(sqle);
				}
				
			return (rs);
			}
			
		
		//---------------------------------------------------------------------------
		/**
			Calls all query methods with test parameters.
		*/
		public void testQueryMethods()
			{
			ResultSet rs;
			}
		}
		
	//===========================================================================
	public static interface ResultSet extends GenOrmResultSet
		{
		public ArrayList<Author> getArrayList(int maxRows);
		public Author getRecord();
		public Author getOnlyRecord();
		}
		
	//===========================================================================
	private static class SQLResultSet 
			implements ResultSet
		{
		private java.sql.ResultSet m_resultSet;
		private java.sql.Statement m_statement;
		private String m_query;
		private boolean m_onFirstResult;
		
		//------------------------------------------------------------------------
		protected SQLResultSet(java.sql.ResultSet resultSet, String query, java.sql.Statement statement)
			{
			m_resultSet = resultSet;
			m_statement = statement;
			m_query = query;
			m_onFirstResult = false;
			}
		
		//------------------------------------------------------------------------
		/**
			Closes any underlying java.sql.Result set and java.sql.Statement 
			that was used to create this results set.
		*/
		public void close()
			{
			try
				{
				m_resultSet.close();
				m_statement.close();
				}
			catch (java.sql.SQLException sqle)
				{
				throw new GenOrmException(sqle);
				}
			}
			
		//------------------------------------------------------------------------
		/**
			Returns the reults as an ArrayList of Record objects.
			The Result set is closed within this call
		*/
		public ArrayList<Author> getArrayList(int maxRows)
			{
			ArrayList<Author> results = new ArrayList<Author>();
			int count = 0;
			
			try
				{
				if (m_onFirstResult)
					{
					count ++;
					results.add(factory.newAuthor(m_resultSet));
					}
					
				while (m_resultSet.next() && (count < maxRows))
					{
					count ++;
					results.add(factory.newAuthor(m_resultSet));
					}
					
				if (m_resultSet.next())
					throw new GenOrmException("Bound of "+maxRows+" is too small for query ["+m_query+"]");
				}
			catch (java.sql.SQLException sqle)
				{
				sqle.printStackTrace();
				throw new GenOrmException(sqle);
				}
				
			close();
			return (results);
			}
			
		//------------------------------------------------------------------------
		/**
			Returns the underlying java.sql.ResultSet object
		*/
		public java.sql.ResultSet getResultSet()
			{
			return (m_resultSet);
			}
			
		//------------------------------------------------------------------------
		/**
			Returns the current record in the result set
		*/
		public Author getRecord()
			{
			return (factory.newAuthor(m_resultSet));
			}
			
		//------------------------------------------------------------------------
		/**
			This call expects only one record in the result set.  If multiple records
			are found an excpetion is thrown.
			The ResultSet object is automatically closed by this call.
		*/
		public Author getOnlyRecord()
			{
			Author ret = null;
			
			try
				{
				if (m_resultSet.next())
					ret = factory.newAuthor(m_resultSet);
					
				if (m_resultSet.next())
					throw new GenOrmException("Multiple rows returned in call from Author.getOnlyRecord");
				}
			catch (java.sql.SQLException sqle)
				{
				throw new GenOrmException(sqle);
				}
				
			close();
			return (ret);
			}
			
		//------------------------------------------------------------------------
		/**
			Returns true if there is another record in the result set.
		*/
		public boolean next()
			{
			boolean ret = false;
			m_onFirstResult = true;
			try
				{
				ret = m_resultSet.next();
				}
			catch (java.sql.SQLException sqle)
				{
				throw new GenOrmException(sqle);
				}
			
			return (ret);
			}
		}
		
	//===========================================================================
		
	private GenOrmInt m_authorId;
	private GenOrmString m_name;

	
	private List<GenOrmRecordKey> m_foreignKeys;
	
	public List<GenOrmRecordKey> getForeignKeys() { return (m_foreignKeys); }

	//---------------------------------------------------------------------------
	/**
	*/
	public int getAuthorId() { return (m_authorId.getValue()); }
	public Author setAuthorId(int data)
		{
		boolean changed = m_authorId.setValue(data);
		
		//Add the now dirty record to the transaction only if it is not previously dirty
		if (changed)
			{
			if (m_dirtyFlags == 0)
				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
				
			m_dirtyFlags |= AUTHOR_ID_FIELD_META.getDirtyFlag();
			}
			
		return ((Author)this);
		}
		
	//---------------------------------------------------------------------------
	/**
	*/
	public String getName() { return (m_name.getValue()); }
	public Author setName(String data)
		{
		boolean changed = m_name.setValue(data);
		
		//Add the now dirty record to the transaction only if it is not previously dirty
		if (changed)
			{
			if (m_dirtyFlags == 0)
				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
				
			m_dirtyFlags |= NAME_FIELD_META.getDirtyFlag();
			}
			
		return ((Author)this);
		}
		
	public Author setNameNull()
		{
		m_name.setNull();
		
		if (m_dirtyFlags == 0)
			GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
			
		m_dirtyFlags |= NAME_FIELD_META.getDirtyFlag();
		
		return ((Author)this);
		}
	
	
	
	
	//---------------------------------------------------------------------------
	private void initialize(int authorId)
		{
		m_authorId.setValue(authorId);

		}
		
	//---------------------------------------------------------------------------
	private void initialize(java.sql.ResultSet rs)
		{
		try
			{
			m_authorId.setValue(rs, 1);
			m_name.setValue(rs, 2);

			}
		catch (java.sql.SQLException sqle)
			{
			throw new GenOrmException(sqle);
			}
		}
	
	//---------------------------------------------------------------------------
	/*package*/ Author_base()
		{
		super(TABLE_NAME);
		m_logger = s_logger;
		m_foreignKeys = new ArrayList<GenOrmRecordKey>();
		

		m_authorId = new GenOrmInt(AUTHOR_ID_FIELD_META);
		addField(m_authorId);

		m_name = new GenOrmString(NAME_FIELD_META);
		addField(m_name);

		GenOrmRecordKey foreignKey;
		}
	
	//---------------------------------------------------------------------------	
	//---------------------------------------------------------------------------
	@Override
	public void setMTS()
		{
		}
		
	//---------------------------------------------------------------------------
	@Override
	public void setCTS()
		{
		}
		
	//---------------------------------------------------------------------------
	public String toString()
		{
		StringBuilder sb = new StringBuilder();
		
		sb.append("author_id=\"");
		sb.append(m_authorId.getValue());
		sb.append("\" ");
		sb.append("name=\"");
		sb.append(m_name.getValue());
		sb.append("\" ");

		
		return (sb.toString().trim());
		}
	}