package genorm.test.orm;

import java.util.*;
import genorm.runtime.*;

/**
	This class has been automatically generated by GenORMous.  This file
	should not be modified.
	
*/
public class Book_base extends GenOrmRecord
	{
	protected static final Logger s_logger = LoggerFactory.getLogger(Book.class.getName());

	public static final String COL_AUTHOR = "author";
	public static final String COL_TITLE = "title";
	public static final String COL_ISBN = "isbn";

	//Change this value to true to turn on warning messages
	private static final boolean WARNINGS = false;
	private static final String SELECT = "SELECT this.\"author\", this.\"title\", this.\"isbn\" ";
	private static final String FROM = "FROM book this ";
	private static final String WHERE = "WHERE ";
	private static final String KEY_WHERE = "WHERE ";
	
	private static final String TABLE_NAME = "book";
	
	private static final GenOrmFieldMeta AUTHOR_FIELD_META = new GenOrmFieldMeta("author", "integer", 0x1, false, true);
	private static final GenOrmFieldMeta TITLE_FIELD_META = new GenOrmFieldMeta("title", "string", 0x2, false, false);
	private static final GenOrmFieldMeta ISBN_FIELD_META = new GenOrmFieldMeta("isbn", "string", 0x4, false, false);

	
		
	//===========================================================================
	public static BookFactory factory = new BookFactory();
	
	public static class BookFactory //Inherit interfaces
			implements GenOrmRecordFactory
		{
		public static final String CREATE_SQL = "CREATE CACHED TABLE book (\n	\"author\" INT  NULL,\n	\"title\" VARCHAR  NULL,\n	\"isbn\" VARCHAR  NULL,\n	FOREIGN KEY (\"author\")\n		REFERENCES author (\"author_id\")\n	)";

		private ArrayList<GenOrmFieldMeta> m_fieldMeta;
		
		private BookFactory()
			{
			m_fieldMeta = new ArrayList<GenOrmFieldMeta>();
			m_fieldMeta.add(AUTHOR_FIELD_META);
			m_fieldMeta.add(TITLE_FIELD_META);
			m_fieldMeta.add(ISBN_FIELD_META);

			}
			
		protected Book newBook(java.sql.ResultSet rs)
			{
			Book rec = new Book();
			((Book_base)rec).initialize(rs);
			return ((Book)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
			}
	
		//---------------------------------------------------------------------------
		/**
			Returns a list of the feild meta for the class that this is a factory of
		*/
		public List<GenOrmFieldMeta> getFields()
			{
			return (m_fieldMeta);
			}

		//---------------------------------------------------------------------------
		/**
			Returns the SQL create statement for this table
		*/
		public String getCreateStatement()
			{
			return (CREATE_SQL);
			}
			
		//---------------------------------------------------------------------------
		/**
			Creates a new entry that is empty
		*/
		public Book createRecord()
			{
			Book rec = new Book();
			rec.m_isNewRecord = true;
			
			return ((Book)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
			}
			
		//---------------------------------------------------------------------------
		/**
		If the table has a primary key that is auto generated this method will 
		return a new table entry with a generated primary key.
		@return Book with generated primary key
		*/
		public Book createWithGeneratedKey()
			{
			throw new UnsupportedOperationException("Book does not support a generated primary key");
			}
			
		//---------------------------------------------------------------------------
		/**
		A generic api for finding a record.
		@param keys This must match the primary key for this record.  If the 
		record has multiple primary keys this parameter must be of type Object[] 
		where each element is the corresponding key.
		@return Book or null if no record is found
		*/
		public Book findRecord(Object keys)
			{
			return (null);
			}
			
		//---------------------------------------------------------------------------
		/**
			Convenience method for selecting records.  Ideally this should not be use, 
			instead a custom query for this table should be used.
			@param where sql where statement.
		*/
		public ResultSet select(String where)
			{
			return (select(where, null));
			}
			
		//---------------------------------------------------------------------------
		/**
			Convenience method for selecting records.  Ideally this should not be use, 
			instead a custom query for this table should be used.
			@param where sql where statement.
			@param orderBy sql order by statement
		*/
		public ResultSet select(String where, String orderBy)
			{
			ResultSet rs = null;
			
			try
				{
				java.sql.Statement stmnt = GenOrmDataSource.createStatement();
				StringBuilder sb = new StringBuilder();
				sb.append(SELECT);
				sb.append(FROM);
				if (where != null)
					{
					sb.append(WHERE);
					sb.append(where);
					}
					
				if (orderBy != null)
					{
					sb.append(" ");
					sb.append(orderBy);
					}
				
				String query = sb.toString();
				rs = new SQLResultSet(stmnt.executeQuery(query), query, stmnt);
				}
			catch (java.sql.SQLException sqle)
				{
				throw new GenOrmException(sqle);
				}
				
			return (rs);
			}
			
		//---------------------------------------------------------------------------
		/**
		*/
		public ResultSet getByAuthor(int author)
			{
			String query = SELECT+"FROM book this WHERE this.\"author\" = ?";
			
			try
				{
				java.sql.PreparedStatement statement = GenOrmDataSource.prepareStatement(query);
				statement.setInt(1, author);
				
				s_logger.debug(statement.toString());
				
				ResultSet rs = new SQLResultSet(statement.executeQuery(), query, statement);
				
				return (rs);
				}
			catch (java.sql.SQLException sqle)
				{
				if (s_logger.isDebug())
					sqle.printStackTrace();
				throw new GenOrmException(sqle);
				}
			}
			

		
		//---------------------------------------------------------------------------
		/**
			Calls all query methods with test parameters.
		*/
		public void testQueryMethods()
			{
			ResultSet rs;
			}
		}
		
	//===========================================================================
	public static interface ResultSet extends GenOrmResultSet
		{
		public ArrayList<Book> getArrayList(int maxRows);
		public Book getRecord();
		public Book getOnlyRecord();
		}
		
	//===========================================================================
	private static class SQLResultSet 
			implements ResultSet
		{
		private java.sql.ResultSet m_resultSet;
		private java.sql.Statement m_statement;
		private String m_query;
		private boolean m_onFirstResult;
		
		//------------------------------------------------------------------------
		protected SQLResultSet(java.sql.ResultSet resultSet, String query, java.sql.Statement statement)
			{
			m_resultSet = resultSet;
			m_statement = statement;
			m_query = query;
			m_onFirstResult = false;
			}
		
		//------------------------------------------------------------------------
		/**
			Closes any underlying java.sql.Result set and java.sql.Statement 
			that was used to create this results set.
		*/
		public void close()
			{
			try
				{
				m_resultSet.close();
				m_statement.close();
				}
			catch (java.sql.SQLException sqle)
				{
				throw new GenOrmException(sqle);
				}
			}
			
		//------------------------------------------------------------------------
		/**
			Returns the reults as an ArrayList of Record objects.
			The Result set is closed within this call
		*/
		public ArrayList<Book> getArrayList(int maxRows)
			{
			ArrayList<Book> results = new ArrayList<Book>();
			int count = 0;
			
			try
				{
				if (m_onFirstResult)
					{
					count ++;
					results.add(factory.newBook(m_resultSet));
					}
					
				while (m_resultSet.next() && (count < maxRows))
					{
					count ++;
					results.add(factory.newBook(m_resultSet));
					}
					
				if (m_resultSet.next())
					throw new GenOrmException("Bound of "+maxRows+" is too small for query ["+m_query+"]");
				}
			catch (java.sql.SQLException sqle)
				{
				sqle.printStackTrace();
				throw new GenOrmException(sqle);
				}
				
			close();
			return (results);
			}
			
		//------------------------------------------------------------------------
		/**
			Returns the underlying java.sql.ResultSet object
		*/
		public java.sql.ResultSet getResultSet()
			{
			return (m_resultSet);
			}
			
		//------------------------------------------------------------------------
		/**
			Returns the current record in the result set
		*/
		public Book getRecord()
			{
			return (factory.newBook(m_resultSet));
			}
			
		//------------------------------------------------------------------------
		/**
			This call expects only one record in the result set.  If multiple records
			are found an excpetion is thrown.
			The ResultSet object is automatically closed by this call.
		*/
		public Book getOnlyRecord()
			{
			Book ret = null;
			
			try
				{
				if (m_resultSet.next())
					ret = factory.newBook(m_resultSet);
					
				if (m_resultSet.next())
					throw new GenOrmException("Multiple rows returned in call from Book.getOnlyRecord");
				}
			catch (java.sql.SQLException sqle)
				{
				throw new GenOrmException(sqle);
				}
				
			close();
			return (ret);
			}
			
		//------------------------------------------------------------------------
		/**
			Returns true if there is another record in the result set.
		*/
		public boolean next()
			{
			boolean ret = false;
			m_onFirstResult = true;
			try
				{
				ret = m_resultSet.next();
				}
			catch (java.sql.SQLException sqle)
				{
				throw new GenOrmException(sqle);
				}
			
			return (ret);
			}
		}
		
	//===========================================================================
		
	private GenOrmInt m_author;
	private GenOrmString m_title;
	private GenOrmString m_isbn;

	
	private List<GenOrmRecordKey> m_foreignKeys;
	
	public List<GenOrmRecordKey> getForeignKeys() { return (m_foreignKeys); }

	//---------------------------------------------------------------------------
	/**
	*/
	public int getAuthor() { return (m_author.getValue()); }
	public Book setAuthor(int data)
		{
		boolean changed = m_author.setValue(data);
		
		//Add the now dirty record to the transaction only if it is not previously dirty
		if (changed)
			{
			if (m_dirtyFlags == 0)
				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
				
			m_dirtyFlags |= AUTHOR_FIELD_META.getDirtyFlag();
			}
			
		return ((Book)this);
		}
		
	public Book setAuthorNull()
		{
		m_author.setNull();
		
		if (m_dirtyFlags == 0)
			GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
			
		m_dirtyFlags |= AUTHOR_FIELD_META.getDirtyFlag();
		
		return ((Book)this);
		}
	//---------------------------------------------------------------------------
	/**
	*/
	public String getTitle() { return (m_title.getValue()); }
	public Book setTitle(String data)
		{
		boolean changed = m_title.setValue(data);
		
		//Add the now dirty record to the transaction only if it is not previously dirty
		if (changed)
			{
			if (m_dirtyFlags == 0)
				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
				
			m_dirtyFlags |= TITLE_FIELD_META.getDirtyFlag();
			}
			
		return ((Book)this);
		}
		
	public Book setTitleNull()
		{
		m_title.setNull();
		
		if (m_dirtyFlags == 0)
			GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
			
		m_dirtyFlags |= TITLE_FIELD_META.getDirtyFlag();
		
		return ((Book)this);
		}
	//---------------------------------------------------------------------------
	/**
	*/
	public String getIsbn() { return (m_isbn.getValue()); }
	public Book setIsbn(String data)
		{
		boolean changed = m_isbn.setValue(data);
		
		//Add the now dirty record to the transaction only if it is not previously dirty
		if (changed)
			{
			if (m_dirtyFlags == 0)
				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
				
			m_dirtyFlags |= ISBN_FIELD_META.getDirtyFlag();
			}
			
		return ((Book)this);
		}
		
	public Book setIsbnNull()
		{
		m_isbn.setNull();
		
		if (m_dirtyFlags == 0)
			GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
			
		m_dirtyFlags |= ISBN_FIELD_META.getDirtyFlag();
		
		return ((Book)this);
		}
	
	
	//---------------------------------------------------------------------------
	public Author getAuthorRef()
		{
		return (Author.factory.find(m_author.getValue()));
		}
		
	//--------------------------------------------------------------------------
	public Book setAuthorRef(Author table)
		{
		//Add the now dirty record to the transaction only if it is not previously dirty
		if (m_author.setValue(table.getAuthorId()))
			{
			if (m_dirtyFlags == 0)
				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
			
			m_dirtyFlags |= AUTHOR_FIELD_META.getDirtyFlag();
			}


			
		return ((Book)this);
		}


	
	
	//---------------------------------------------------------------------------
	private void initialize()
		{
		}
		
	//---------------------------------------------------------------------------
	private void initialize(java.sql.ResultSet rs)
		{
		try
			{
			m_author.setValue(rs, 1);
			m_title.setValue(rs, 2);
			m_isbn.setValue(rs, 3);

			}
		catch (java.sql.SQLException sqle)
			{
			throw new GenOrmException(sqle);
			}
		}
	
	//---------------------------------------------------------------------------
	/*package*/ Book_base()
		{
		super(TABLE_NAME);
		m_logger = s_logger;
		m_foreignKeys = new ArrayList<GenOrmRecordKey>();
		

		m_author = new GenOrmInt(AUTHOR_FIELD_META);
		addField(m_author);

		m_title = new GenOrmString(TITLE_FIELD_META);
		addField(m_title);

		m_isbn = new GenOrmString(ISBN_FIELD_META);
		addField(m_isbn);

		GenOrmRecordKey foreignKey;
		foreignKey = new GenOrmRecordKey("author");
		foreignKey.addKeyField("author_id", m_author);

		m_foreignKeys.add(foreignKey);

		}
	
	//---------------------------------------------------------------------------	
	//---------------------------------------------------------------------------
	@Override
	public void setMTS()
		{
		}
		
	//---------------------------------------------------------------------------
	@Override
	public void setCTS()
		{
		}
		
	//---------------------------------------------------------------------------
	public String toString()
		{
		StringBuilder sb = new StringBuilder();
		
		sb.append("author=\"");
		sb.append(m_author.getValue());
		sb.append("\" ");
		sb.append("title=\"");
		sb.append(m_title.getValue());
		sb.append("\" ");
		sb.append("isbn=\"");
		sb.append(m_isbn.getValue());
		sb.append("\" ");

		
		return (sb.toString().trim());
		}
	}